// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: starship/maintenance/v1/starship.proto

package maintenance_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StarshipMaintenanceService_CreateMaintenanceTask_FullMethodName = "/starship.maintenance.v1.StarshipMaintenanceService/CreateMaintenanceTask"
	StarshipMaintenanceService_GetMaintenanceTask_FullMethodName    = "/starship.maintenance.v1.StarshipMaintenanceService/GetMaintenanceTask"
	StarshipMaintenanceService_UpdateMaintenanceTask_FullMethodName = "/starship.maintenance.v1.StarshipMaintenanceService/UpdateMaintenanceTask"
	StarshipMaintenanceService_ListMaintenanceTasks_FullMethodName  = "/starship.maintenance.v1.StarshipMaintenanceService/ListMaintenanceTasks"
	StarshipMaintenanceService_GetShip_FullMethodName               = "/starship.maintenance.v1.StarshipMaintenanceService/GetShip"
	StarshipMaintenanceService_ListShips_FullMethodName             = "/starship.maintenance.v1.StarshipMaintenanceService/ListShips"
)

// StarshipMaintenanceServiceClient is the client API for StarshipMaintenanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StarshipMaintenanceService
type StarshipMaintenanceServiceClient interface {
	// Basic CRUD operations for maintenance tasks
	CreateMaintenanceTask(ctx context.Context, in *CreateMaintenanceTaskRequest, opts ...grpc.CallOption) (*MaintenanceTask, error)
	GetMaintenanceTask(ctx context.Context, in *GetMaintenanceTaskRequest, opts ...grpc.CallOption) (*MaintenanceTask, error)
	UpdateMaintenanceTask(ctx context.Context, in *UpdateMaintenanceTaskRequest, opts ...grpc.CallOption) (*MaintenanceTask, error)
	ListMaintenanceTasks(ctx context.Context, in *ListMaintenanceTasksRequest, opts ...grpc.CallOption) (*ListMaintenanceTasksResponse, error)
	// Basic ship operations
	GetShip(ctx context.Context, in *GetShipRequest, opts ...grpc.CallOption) (*Ship, error)
	ListShips(ctx context.Context, in *ListShipsRequest, opts ...grpc.CallOption) (*ListShipsResponse, error)
}

type starshipMaintenanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStarshipMaintenanceServiceClient(cc grpc.ClientConnInterface) StarshipMaintenanceServiceClient {
	return &starshipMaintenanceServiceClient{cc}
}

func (c *starshipMaintenanceServiceClient) CreateMaintenanceTask(ctx context.Context, in *CreateMaintenanceTaskRequest, opts ...grpc.CallOption) (*MaintenanceTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaintenanceTask)
	err := c.cc.Invoke(ctx, StarshipMaintenanceService_CreateMaintenanceTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starshipMaintenanceServiceClient) GetMaintenanceTask(ctx context.Context, in *GetMaintenanceTaskRequest, opts ...grpc.CallOption) (*MaintenanceTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaintenanceTask)
	err := c.cc.Invoke(ctx, StarshipMaintenanceService_GetMaintenanceTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starshipMaintenanceServiceClient) UpdateMaintenanceTask(ctx context.Context, in *UpdateMaintenanceTaskRequest, opts ...grpc.CallOption) (*MaintenanceTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaintenanceTask)
	err := c.cc.Invoke(ctx, StarshipMaintenanceService_UpdateMaintenanceTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starshipMaintenanceServiceClient) ListMaintenanceTasks(ctx context.Context, in *ListMaintenanceTasksRequest, opts ...grpc.CallOption) (*ListMaintenanceTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMaintenanceTasksResponse)
	err := c.cc.Invoke(ctx, StarshipMaintenanceService_ListMaintenanceTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starshipMaintenanceServiceClient) GetShip(ctx context.Context, in *GetShipRequest, opts ...grpc.CallOption) (*Ship, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ship)
	err := c.cc.Invoke(ctx, StarshipMaintenanceService_GetShip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starshipMaintenanceServiceClient) ListShips(ctx context.Context, in *ListShipsRequest, opts ...grpc.CallOption) (*ListShipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShipsResponse)
	err := c.cc.Invoke(ctx, StarshipMaintenanceService_ListShips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StarshipMaintenanceServiceServer is the server API for StarshipMaintenanceService service.
// All implementations must embed UnimplementedStarshipMaintenanceServiceServer
// for forward compatibility.
//
// StarshipMaintenanceService
type StarshipMaintenanceServiceServer interface {
	// Basic CRUD operations for maintenance tasks
	CreateMaintenanceTask(context.Context, *CreateMaintenanceTaskRequest) (*MaintenanceTask, error)
	GetMaintenanceTask(context.Context, *GetMaintenanceTaskRequest) (*MaintenanceTask, error)
	UpdateMaintenanceTask(context.Context, *UpdateMaintenanceTaskRequest) (*MaintenanceTask, error)
	ListMaintenanceTasks(context.Context, *ListMaintenanceTasksRequest) (*ListMaintenanceTasksResponse, error)
	// Basic ship operations
	GetShip(context.Context, *GetShipRequest) (*Ship, error)
	ListShips(context.Context, *ListShipsRequest) (*ListShipsResponse, error)
	mustEmbedUnimplementedStarshipMaintenanceServiceServer()
}

// UnimplementedStarshipMaintenanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStarshipMaintenanceServiceServer struct{}

func (UnimplementedStarshipMaintenanceServiceServer) CreateMaintenanceTask(context.Context, *CreateMaintenanceTaskRequest) (*MaintenanceTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaintenanceTask not implemented")
}
func (UnimplementedStarshipMaintenanceServiceServer) GetMaintenanceTask(context.Context, *GetMaintenanceTaskRequest) (*MaintenanceTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaintenanceTask not implemented")
}
func (UnimplementedStarshipMaintenanceServiceServer) UpdateMaintenanceTask(context.Context, *UpdateMaintenanceTaskRequest) (*MaintenanceTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaintenanceTask not implemented")
}
func (UnimplementedStarshipMaintenanceServiceServer) ListMaintenanceTasks(context.Context, *ListMaintenanceTasksRequest) (*ListMaintenanceTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaintenanceTasks not implemented")
}
func (UnimplementedStarshipMaintenanceServiceServer) GetShip(context.Context, *GetShipRequest) (*Ship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShip not implemented")
}
func (UnimplementedStarshipMaintenanceServiceServer) ListShips(context.Context, *ListShipsRequest) (*ListShipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShips not implemented")
}
func (UnimplementedStarshipMaintenanceServiceServer) mustEmbedUnimplementedStarshipMaintenanceServiceServer() {
}
func (UnimplementedStarshipMaintenanceServiceServer) testEmbeddedByValue() {}

// UnsafeStarshipMaintenanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StarshipMaintenanceServiceServer will
// result in compilation errors.
type UnsafeStarshipMaintenanceServiceServer interface {
	mustEmbedUnimplementedStarshipMaintenanceServiceServer()
}

func RegisterStarshipMaintenanceServiceServer(s grpc.ServiceRegistrar, srv StarshipMaintenanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedStarshipMaintenanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StarshipMaintenanceService_ServiceDesc, srv)
}

func _StarshipMaintenanceService_CreateMaintenanceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMaintenanceTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarshipMaintenanceServiceServer).CreateMaintenanceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarshipMaintenanceService_CreateMaintenanceTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarshipMaintenanceServiceServer).CreateMaintenanceTask(ctx, req.(*CreateMaintenanceTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarshipMaintenanceService_GetMaintenanceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaintenanceTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarshipMaintenanceServiceServer).GetMaintenanceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarshipMaintenanceService_GetMaintenanceTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarshipMaintenanceServiceServer).GetMaintenanceTask(ctx, req.(*GetMaintenanceTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarshipMaintenanceService_UpdateMaintenanceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMaintenanceTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarshipMaintenanceServiceServer).UpdateMaintenanceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarshipMaintenanceService_UpdateMaintenanceTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarshipMaintenanceServiceServer).UpdateMaintenanceTask(ctx, req.(*UpdateMaintenanceTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarshipMaintenanceService_ListMaintenanceTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMaintenanceTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarshipMaintenanceServiceServer).ListMaintenanceTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarshipMaintenanceService_ListMaintenanceTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarshipMaintenanceServiceServer).ListMaintenanceTasks(ctx, req.(*ListMaintenanceTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarshipMaintenanceService_GetShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarshipMaintenanceServiceServer).GetShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarshipMaintenanceService_GetShip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarshipMaintenanceServiceServer).GetShip(ctx, req.(*GetShipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarshipMaintenanceService_ListShips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarshipMaintenanceServiceServer).ListShips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarshipMaintenanceService_ListShips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarshipMaintenanceServiceServer).ListShips(ctx, req.(*ListShipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StarshipMaintenanceService_ServiceDesc is the grpc.ServiceDesc for StarshipMaintenanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StarshipMaintenanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "starship.maintenance.v1.StarshipMaintenanceService",
	HandlerType: (*StarshipMaintenanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMaintenanceTask",
			Handler:    _StarshipMaintenanceService_CreateMaintenanceTask_Handler,
		},
		{
			MethodName: "GetMaintenanceTask",
			Handler:    _StarshipMaintenanceService_GetMaintenanceTask_Handler,
		},
		{
			MethodName: "UpdateMaintenanceTask",
			Handler:    _StarshipMaintenanceService_UpdateMaintenanceTask_Handler,
		},
		{
			MethodName: "ListMaintenanceTasks",
			Handler:    _StarshipMaintenanceService_ListMaintenanceTasks_Handler,
		},
		{
			MethodName: "GetShip",
			Handler:    _StarshipMaintenanceService_GetShip_Handler,
		},
		{
			MethodName: "ListShips",
			Handler:    _StarshipMaintenanceService_ListShips_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "starship/maintenance/v1/starship.proto",
}
