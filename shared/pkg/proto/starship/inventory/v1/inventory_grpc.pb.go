// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: starship/inventory/v1/inventory.proto

package inventory_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StarshipInventoryService_GetPart_FullMethodName   = "/starship.inventory.v1.StarshipInventoryService/GetPart"
	StarshipInventoryService_ListParts_FullMethodName = "/starship.inventory.v1.StarshipInventoryService/ListParts"
)

// StarshipInventoryServiceClient is the client API for StarshipInventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StarshipInventoryService
type StarshipInventoryServiceClient interface {
	GetPart(ctx context.Context, in *GetPartRequest, opts ...grpc.CallOption) (*InventoryPartResponse, error)
	ListParts(ctx context.Context, in *ListPartsRequest, opts ...grpc.CallOption) (*ListInventoryPartsResponse, error)
}

type starshipInventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStarshipInventoryServiceClient(cc grpc.ClientConnInterface) StarshipInventoryServiceClient {
	return &starshipInventoryServiceClient{cc}
}

func (c *starshipInventoryServiceClient) GetPart(ctx context.Context, in *GetPartRequest, opts ...grpc.CallOption) (*InventoryPartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryPartResponse)
	err := c.cc.Invoke(ctx, StarshipInventoryService_GetPart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starshipInventoryServiceClient) ListParts(ctx context.Context, in *ListPartsRequest, opts ...grpc.CallOption) (*ListInventoryPartsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInventoryPartsResponse)
	err := c.cc.Invoke(ctx, StarshipInventoryService_ListParts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StarshipInventoryServiceServer is the server API for StarshipInventoryService service.
// All implementations must embed UnimplementedStarshipInventoryServiceServer
// for forward compatibility.
//
// StarshipInventoryService
type StarshipInventoryServiceServer interface {
	GetPart(context.Context, *GetPartRequest) (*InventoryPartResponse, error)
	ListParts(context.Context, *ListPartsRequest) (*ListInventoryPartsResponse, error)
	mustEmbedUnimplementedStarshipInventoryServiceServer()
}

// UnimplementedStarshipInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStarshipInventoryServiceServer struct{}

func (UnimplementedStarshipInventoryServiceServer) GetPart(context.Context, *GetPartRequest) (*InventoryPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPart not implemented")
}
func (UnimplementedStarshipInventoryServiceServer) ListParts(context.Context, *ListPartsRequest) (*ListInventoryPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParts not implemented")
}
func (UnimplementedStarshipInventoryServiceServer) mustEmbedUnimplementedStarshipInventoryServiceServer() {
}
func (UnimplementedStarshipInventoryServiceServer) testEmbeddedByValue() {}

// UnsafeStarshipInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StarshipInventoryServiceServer will
// result in compilation errors.
type UnsafeStarshipInventoryServiceServer interface {
	mustEmbedUnimplementedStarshipInventoryServiceServer()
}

func RegisterStarshipInventoryServiceServer(s grpc.ServiceRegistrar, srv StarshipInventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedStarshipInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StarshipInventoryService_ServiceDesc, srv)
}

func _StarshipInventoryService_GetPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarshipInventoryServiceServer).GetPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarshipInventoryService_GetPart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarshipInventoryServiceServer).GetPart(ctx, req.(*GetPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarshipInventoryService_ListParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarshipInventoryServiceServer).ListParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarshipInventoryService_ListParts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarshipInventoryServiceServer).ListParts(ctx, req.(*ListPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StarshipInventoryService_ServiceDesc is the grpc.ServiceDesc for StarshipInventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StarshipInventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "starship.inventory.v1.StarshipInventoryService",
	HandlerType: (*StarshipInventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPart",
			Handler:    _StarshipInventoryService_GetPart_Handler,
		},
		{
			MethodName: "ListParts",
			Handler:    _StarshipInventoryService_ListParts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "starship/inventory/v1/inventory.proto",
}
